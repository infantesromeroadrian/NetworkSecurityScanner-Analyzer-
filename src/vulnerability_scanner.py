import socket
from typing import Dict, List

class VulnerabilityScanner:
    """Scanner for detecting vulnerabilities in network devices"""
    
    def __init__(self):
        self.vulnerability_db = {
            'SSH-2.0-dropbear': 'Potentially outdated SSH server',
            'mini_httpd': 'Basic HTTP server - potential security risks',
            'Apache/1': 'Outdated Apache version',
            'FTP': 'FTP service - consider using SFTP',
            'telnet': 'Telnet service - highly insecure'
        }
        
    def scan_ports(self, ip: str, ports: List[int] = None) -> Dict:
        """Scan specific ports on a device"""
        if ports is None:
            ports = [21, 22, 23, 25, 53, 80, 443, 3306, 8080]
            
        results = {}
        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((ip, port))
                if result == 0:
                    banner = self.get_banner(sock)
                    results[port] = banner
                sock.close()
            except:
                continue
        return results
    
    def get_banner(self, sock: socket.socket) -> str:
        """Try to get service banner"""
        try:
            sock.send(b"HEAD / HTTP/1.0\r\n\r\n")
            return sock.recv(1024).decode('utf-8', errors='ignore')
        except:
            return "" 