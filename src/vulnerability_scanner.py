"""Módulo para escanear vulnerabilidades"""
import asyncio
from typing import Dict, Optional
import socket

class VulnerabilityScanner:
    def __init__(self):
        self.common_ports = {
            21: "FTP",
            22: "SSH",
            23: "Telnet",
            25: "SMTP",
            53: "DNS",
            80: "HTTP",
            443: "HTTPS",
            445: "SMB",
            3306: "MySQL",
            3389: "RDP",
            5432: "PostgreSQL",
            8080: "HTTP-Proxy"
        }
        
    async def get_service_banner(self, ip: str, port: int) -> Optional[str]:
        """Intenta obtener el banner del servicio"""
        try:
            reader, writer = await asyncio.wait_for(
                asyncio.open_connection(ip, port),
                timeout=2.0
            )
            
            try:
                # Enviar un simple GET para HTTP
                if port in [80, 443, 8080]:
                    writer.write(b"GET / HTTP/1.0\r\n\r\n")
                    await writer.drain()
                
                # Intentar leer la respuesta
                banner = await reader.read(1024)
                return banner.decode('utf-8', errors='ignore').strip()
                
            finally:
                writer.close()
                await writer.wait_closed()
                
        except Exception:
            return None
            
    async def scan_device(self, ip: str) -> Dict:
        """Escanea un dispositivo en busca de vulnerabilidades"""
        vulnerabilities = {}
        
        for port, service_name in self.common_ports.items():
            try:
                banner = await self.get_service_banner(ip, port)
                if banner:
                    vulnerabilities[port] = {
                        'service': service_name,
                        'banner': banner,
                        'risk_level': self._evaluate_risk(service_name, banner)
                    }
            except Exception as e:
                print(f"Error escaneando {ip}:{port} - {e}")
                
        return vulnerabilities
        
    def _evaluate_risk(self, service: str, banner: str) -> str:
        """Evalúa el nivel de riesgo basado en el servicio y banner"""
        risk_level = "low"
        
        # Servicios de alto riesgo
        high_risk_services = ["telnet", "ftp", "smb"]
        if service.lower() in high_risk_services:
            risk_level = "high"
            
        # Versiones antiguas o vulnerables conocidas
        vulnerable_patterns = [
            "windows nt 5", "windows 2000", "windows xp",
            "apache/1.", "apache/2.0", "openssh/4.",
            "vsftpd 2.3.4"
        ]
        
        for pattern in vulnerable_patterns:
            if pattern.lower() in banner.lower():
                risk_level = "high"
                break
                
        return risk_level 